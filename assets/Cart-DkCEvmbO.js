import{r as x,f as P,j as t,g as v,q as b,c as p,d as g,w as S,h as E,i as C,T as I}from"./index-BeIAtBiL.js";import{Q as O,B as n}from"./ReactToastify-CL4BCAW-.js";const F=()=>{const[o,l]=x.useState(JSON.parse(localStorage.getItem("cart"))||[]),N=P();x.useEffect(()=>{const e=()=>{l(JSON.parse(localStorage.getItem("cart"))||[])};return window.addEventListener("storage",e),()=>window.removeEventListener("storage",e)},[]);const k=e=>{const r=o.filter((a,i)=>i!==e);localStorage.setItem("cart",JSON.stringify(r)),l(r),window.dispatchEvent(new Event("storage")),n.error("Item removed from cart!")},f=(e,r)=>{const a=[...o];a[e].quantity+=r,a[e].quantity<1&&(a[e].quantity=1),a[e].totalPrice=parseFloat(a[e].price.substring(1))*a[e].quantity,localStorage.setItem("cart",JSON.stringify(a)),l(a),window.dispatchEvent(new Event("storage"))},q=async()=>{if(o.length===0){n.info("Your cart is empty.");return}try{const e=JSON.parse(localStorage.getItem("user"));if(!e){n.error("User not found. Please log in.");return}const r=await v(b(p(g,"Users"),S("username","==",e.username)));if(r.empty){n.error("User data not found.");return}const a=r.docs[0].data(),i=[];let y=0;const u=new Map;for(const s of o){console.log(`Updating product: ${s.name}`);const d=b(p(g,"Products"),S("product_name","==",s.name)),m=await v(d);if(m.empty){n.error(`Product ${s.name} not found in the database.`);return}const h=m.docs[0],c=h.data(),j=c.quantity-s.quantity;if(j<0){n.error(`Not enough stock for ${s.name}.`);return}await E(h.ref,{quantity:j}),console.log(`Product ${s.name} updated successfully.`);const w={product_name:s.name,price:parseFloat(s.price.substring(1)),quantity:s.quantity,total:s.totalPrice,seller:c.username,address:a.address};i.push(w),y+=s.totalPrice,u.has(c.username)||u.set(c.username,[]),u.get(c.username).push(w)}await C(p(g,"Orders"),{uid:e.uid,username:e.username,orderDate:I.now(),totalAmount:y,status:"completed",orderItems:i});for(const[s,d]of u.entries()){const m=d.reduce((h,c)=>h+c.total,0);await C(p(g,"Sales"),{sellerUsername:s,orderDate:I.now(),totalAmount:m,status:"completed",orderItems:d,buyerUsername:e.username})}localStorage.setItem("checkout_cart",JSON.stringify(o)),N("/checkout-success"),localStorage.removeItem("cart"),window.dispatchEvent(new Event("storage")),l([]),n.success("Checkout successful!")}catch(e){console.error("Error during checkout:",e),n.error("An error occurred during checkout. Please try again.")}};return t.jsxs("div",{className:"cart-container",children:[t.jsx("h1",{children:"Your Shopping Cart"}),o.length>0?t.jsxs("table",{className:"cart-table",children:[t.jsx("thead",{children:t.jsxs("tr",{children:[t.jsx("th",{children:"Product"}),t.jsx("th",{children:"Price"}),t.jsx("th",{children:"Quantity"}),t.jsx("th",{children:"Total Price"}),t.jsx("th",{children:"Actions"})]})}),t.jsx("tbody",{children:o.map((e,r)=>t.jsxs("tr",{children:[t.jsx("td",{children:e.name}),t.jsx("td",{children:e.price}),t.jsxs("td",{children:[t.jsx("button",{className:"b",onClick:()=>f(r,-1),children:"-"}),e.quantity,t.jsx("button",{className:"b",onClick:()=>f(r,1),children:"+"})]}),t.jsxs("td",{children:["$",e.totalPrice.toFixed(2)]}),t.jsx("td",{children:t.jsx("button",{onClick:()=>k(r),className:"remove-button",children:"Remove"})})]},r))})]}):t.jsx("p",{children:"Your cart is empty."}),t.jsxs("div",{className:"total",children:["Total: $",o.reduce((e,r)=>e+r.totalPrice,0).toFixed(2)]}),t.jsx("div",{className:"c",children:t.jsx("button",{onClick:q,className:"checkout-button",children:"Checkout"})}),t.jsx(O,{position:"bottom-center",autoClose:3e3,hideProgressBar:!0,newestOnTop:!1,closeOnClick:!0,rtl:!1,pauseOnFocusLoss:!1,draggable:!1,pauseOnHover:!0})]})};export{F as default};
